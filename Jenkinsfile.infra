pipeline {
    agent any
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Environment to deploy')
        choice(name: 'ACTION', choices: ['deploy', 'delete'], description: 'Action to perform')
        string(name: 'DUMMY_IMAGE', defaultValue: 'public.ecr.aws/amazonlinux/amazonlinux:latest', description: 'Dummy image to use for initial deployment')
        string(name: 'VPC_ID', defaultValue: 'vpc-03b72cde5edbd5472', description: 'Existing VPC ID')
        string(name: 'PUBLIC_SUBNET_1', defaultValue: '', description: 'First public subnet ID in the existing VPC')
        string(name: 'PUBLIC_SUBNET_2', defaultValue: '', description: 'Second public subnet ID in the existing VPC')
        string(name: 'PRIVATE_SUBNET_1', defaultValue: '', description: 'First private subnet ID in the existing VPC')
        string(name: 'PRIVATE_SUBNET_2', defaultValue: '', description: 'Second private subnet ID in the existing VPC')
    }
    
    environment {
        AWS_ACCOUNT_ID = '427260910901'
        AWS_REGION = 'ap-southeast-2'
        STACK_NAME = "products-api-ecs-${params.ENVIRONMENT}"
    }
    
    stages {
        stage('Fetch Subnet IDs') {
            when { expression { params.ACTION == 'deploy' && (params.PUBLIC_SUBNET_1 == '' || params.PUBLIC_SUBNET_2 == '' || params.PRIVATE_SUBNET_1 == '' || params.PRIVATE_SUBNET_2 == '') } }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                    script {
                        // Get all subnets in the VPC
                        def subnetsJson = sh(script: "aws ec2 describe-subnets --filters 'Name=vpc-id,Values=${params.VPC_ID}' --query 'Subnets[*].[SubnetId,Tags[?Key==`Name`].Value|[0],MapPublicIpOnLaunch]' --output json", returnStdout: true).trim()
                        def subnets = readJSON text: subnetsJson
                        
                        def publicSubnets = []
                        def privateSubnets = []
                        
                        // Categorize subnets as public or private
                        for (subnet in subnets) {
                            if (subnet[2]) { // MapPublicIpOnLaunch is true
                                publicSubnets.add(subnet[0])
                            } else {
                                privateSubnets.add(subnet[0])
                            }
                        }
                        
                        // Set parameters
                        if (publicSubnets.size() >= 2 && privateSubnets.size() >= 2) {
                            env.PUBLIC_SUBNET_1 = publicSubnets[0]
                            env.PUBLIC_SUBNET_2 = publicSubnets[1]
                            env.PRIVATE_SUBNET_1 = privateSubnets[0]
                            env.PRIVATE_SUBNET_2 = privateSubnets[1]
                            echo "Using subnets: Public: ${env.PUBLIC_SUBNET_1}, ${env.PUBLIC_SUBNET_2}, Private: ${env.PRIVATE_SUBNET_1}, ${env.PRIVATE_SUBNET_2}"
                        } else {
                            error "Not enough subnets found in VPC ${params.VPC_ID}. Need at least 2 public and 2 private subnets."
                        }
                    }
                }
            }
        }
        
        stage('Validate Template') {
            when { expression { params.ACTION == 'deploy' } }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                    sh 'aws cloudformation validate-template --template-body file://infra/template-existing-vpc.yaml'
                }
            }
        }
        
        stage('Create Modified Template') {
            when { expression { params.ACTION == 'deploy' } }
            steps {
                sh """
                    # Create a temporary modified template with the dummy image
                    sed 's|Image: !Sub .\\{1,\\}|Image: ${params.DUMMY_IMAGE}|g' infra/template-existing-vpc.yaml > infra/template-modified.yaml
                """
            }
        }
        
        stage('Deploy Infrastructure') {
            when { expression { params.ACTION == 'deploy' } }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                    script {
                        def publicSubnet1 = params.PUBLIC_SUBNET_1 ?: env.PUBLIC_SUBNET_1
                        def publicSubnet2 = params.PUBLIC_SUBNET_2 ?: env.PUBLIC_SUBNET_2
                        def privateSubnet1 = params.PRIVATE_SUBNET_1 ?: env.PRIVATE_SUBNET_1
                        def privateSubnet2 = params.PRIVATE_SUBNET_2 ?: env.PRIVATE_SUBNET_2
                        
                        sh """
                            aws cloudformation deploy \
                                --template-file infra/template-modified.yaml \
                                --stack-name ${STACK_NAME} \
                                --parameter-overrides \
                                    Environment=${params.ENVIRONMENT} \
                                    AccountId=${AWS_ACCOUNT_ID} \
                                    DomainName=tonyffenochezra.com \
                                    VpcId=${params.VPC_ID} \
                                    PublicSubnet1Id=${publicSubnet1} \
                                    PublicSubnet2Id=${publicSubnet2} \
                                    PrivateSubnet1Id=${privateSubnet1} \
                                    PrivateSubnet2Id=${privateSubnet2} \
                                --capabilities CAPABILITY_IAM \
                                --region ${AWS_REGION} \
                                --no-fail-on-empty-changeset
                        """
                    }
                }
            }
        }
        
        stage('Delete Infrastructure') {
            when { expression { params.ACTION == 'delete' } }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                    sh """
                        aws cloudformation delete-stack \
                            --stack-name ${STACK_NAME} \
                            --region ${AWS_REGION}
                        
                        aws cloudformation wait stack-delete-complete \
                            --stack-name ${STACK_NAME} \
                            --region ${AWS_REGION}
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo "Infrastructure ${params.ACTION} completed successfully for ${params.ENVIRONMENT}"
        }
        failure {
            echo "Infrastructure ${params.ACTION} failed for ${params.ENVIRONMENT}"
        }
    }
}