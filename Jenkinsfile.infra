pipeline {
    agent any
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Environment to deploy')
        choice(name: 'ACTION', choices: ['deploy', 'delete'], description: 'Action to perform')
    }
    
    environment {
        AWS_ACCOUNT_ID = '427260910901'
        AWS_REGION = 'ap-southeast-2'
        STACK_NAME = "products-api-ecs-${params.ENVIRONMENT}"
    }
    
    stages {
        
        stage('Validate Template') {
            when { expression { params.ACTION == 'deploy' } }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                    sh 'aws cloudformation validate-template --template-body file://infra/template-existing-vpc.yaml'
                }
            }
        }
        
        stage('Create Modified Template') {
            when { expression { params.ACTION == 'deploy' } }
            steps {
                sh """
                    # Copy the template without modifications
                    cp infra/template-existing-vpc.yaml infra/template-modified.yaml
                """
            }
        }
        
        stage('Deploy Infrastructure') {
            when { expression { params.ACTION == 'deploy' } }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                    sh """
                        aws cloudformation deploy \
                            --template-file infra/template-modified.yaml \
                            --stack-name ${STACK_NAME} \
                            --parameter-overrides \
                                Environment=${params.ENVIRONMENT} \
                                AccountId=${AWS_ACCOUNT_ID} \
                                DomainName=tonyffenochezra.com \
                                VpcId=vpc-03b72cde5edbd5472 \
                                PublicSubnet1Id=subnet-09ff13fc14a20db6b \
                                PublicSubnet2Id=subnet-09ff13fc14a20db6b \
                                PrivateSubnet1Id=subnet-0b066ef635aebfd81 \
                                PrivateSubnet2Id=subnet-0b066ef635aebfd81 \
                                SingleSubnetDeployment=false \
                            --capabilities CAPABILITY_IAM \
                            --region ${AWS_REGION} \
                            --no-fail-on-empty-changeset
                        
                        # Check stack status
                        STACK_STATUS=\$(aws cloudformation describe-stacks \
                            --stack-name ${STACK_NAME} \
                            --region ${AWS_REGION} \
                            --query 'Stacks[0].StackStatus' \
                            --output text)
                        
                        if [[ "\$STACK_STATUS" == *"ROLLBACK"* ]] || [[ "\$STACK_STATUS" == *"FAILED"* ]]; then
                            echo "Stack deployment failed with status: \$STACK_STATUS"
                            aws cloudformation describe-stack-events \
                                --stack-name ${STACK_NAME} \
                                --region ${AWS_REGION} \
                                --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
                                --output table
                            exit 1
                        fi
                    """
                }
            }
        }
        
        stage('Delete Infrastructure') {
            when { expression { params.ACTION == 'delete' } }
            steps {
                withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                    sh """
                        aws cloudformation delete-stack \
                            --stack-name ${STACK_NAME} \
                            --region ${AWS_REGION}
                        
                        aws cloudformation wait stack-delete-complete \
                            --stack-name ${STACK_NAME} \
                            --region ${AWS_REGION}
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                if (params.ACTION == 'deploy') {
                    withCredentials([aws(credentialsId: 'aws-credentials', region: 'ap-southeast-2')]) {
                        sh """
                            echo "Final stack status:"
                            aws cloudformation describe-stacks \
                                --stack-name ${STACK_NAME} \
                                --region ${AWS_REGION} \
                                --query 'Stacks[0].StackStatus' \
                                --output text || echo "Stack not found"
                        """
                    }
                }
            }
        }
        success {
            echo "Infrastructure ${params.ACTION} completed successfully for ${params.ENVIRONMENT}"
        }
        failure {
            echo "Infrastructure ${params.ACTION} failed for ${params.ENVIRONMENT}"
        }
    }
}