pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Target environment'
        )
        string(
            name: 'IMAGE_TAG',
            defaultValue: 'latest',
            description: 'ECR image tag to deploy'
        )
    }
    
    environment {
        ECR_REGISTRY = '427260910901.dkr.ecr.ap-southeast-2.amazonaws.com'
        ECR_REPOSITORY = 'products-api'
        AWS_REGION = 'ap-southeast-2'
    }
    
    stages {
        stage('Configure AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh 'aws sts get-caller-identity'
                    sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        def clusterName = "products-api-${params.ENVIRONMENT}"
                        def serviceName = "products-api-${params.ENVIRONMENT}"
                        def imageUri = "${ECR_REGISTRY}/${ECR_REPOSITORY}:${params.IMAGE_TAG}"
                        
                        sh """
                            CURRENT_TASK_DEF=\$(aws ecs describe-services --cluster ${clusterName} --services ${serviceName} --query 'services[0].taskDefinition' --output text --region ${AWS_REGION})
                            
                            aws ecs describe-task-definition --task-definition \$CURRENT_TASK_DEF --region ${AWS_REGION} --query 'taskDefinition.{family:family,networkMode:networkMode,requiresCompatibilities:requiresCompatibilities,cpu:cpu,memory:memory,executionRoleArn:executionRoleArn,taskRoleArn:taskRoleArn,containerDefinitions:containerDefinitions}' > task-def-base.json
                            
                            # Update image in container definition
                            python3 -c "
import json
import sys
with open('task-def-base.json', 'r') as f:
    task_def = json.load(f)
task_def['containerDefinitions'][0]['image'] = '${imageUri}'
with open('new-task-def.json', 'w') as f:
    json.dump(task_def, f, indent=2)
"
                            
                            NEW_REVISION=\$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --region ${AWS_REGION} --query 'taskDefinition.taskDefinitionArn' --output text)
                            
                            aws ecs update-service \
                                --cluster ${clusterName} \
                                --service ${serviceName} \
                                --task-definition \$NEW_REVISION \
                                --region ${AWS_REGION}
                        """
                        
                        echo "Deployed ${imageUri} to ${params.ENVIRONMENT} environment"
                    }
                }
            }
        }
        
        stage('Wait for Deployment') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        def clusterName = "products-api-${params.ENVIRONMENT}"
                        def serviceName = "products-api-${params.ENVIRONMENT}"
                        
                        sh """
                            aws ecs wait services-stable \
                                --cluster ${clusterName} \
                                --services ${serviceName} \
                                --region ${AWS_REGION}
                        """
                        
                        echo "Deployment to ${params.ENVIRONMENT} completed successfully"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "✅ Successfully deployed ${params.IMAGE_TAG} to ${params.ENVIRONMENT}"
        }
        failure {
            echo "❌ Deployment failed for ${params.IMAGE_TAG} to ${params.ENVIRONMENT}"
        }
    }
}