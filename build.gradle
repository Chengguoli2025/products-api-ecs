plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'org.flywaydb.flyway' version '9.22.3'
    id 'com.avast.gradle.docker-compose' version '0.17.6'
}

group = 'com.tony'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    // AWS SDK
    implementation 'software.amazon.awssdk:ssm:2.21.29'
    implementation 'software.amazon.awssdk:auth:2.21.29'
    implementation 'software.amazon.awssdk:regions:2.21.29'
    implementation 'software.amazon.awssdk:secretsmanager:2.21.29'

    // HTTP Client
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    // Logging
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

bootJar {
    archiveFileName = 'products-api.jar'
}
/*
startTestEnvironment {
    dependsOn += ["composeUp"]
}*/

tasks.register('startTestEnvironment') {
    dependsOn composeUp
    description = 'Start test environment Docker containers'
    group = 'docker'
}

tasks.register('stopTestEnvironment') {
    dependsOn composeDown
    description = 'Stop test environment Docker containers'
    group = 'docker'
}